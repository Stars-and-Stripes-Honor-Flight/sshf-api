# This workflow will deploy source code on Cloud Run when a commit is pushed to
# the "main" branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Build (cloudbuild.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Source Developer (roles/run.sourceDeveloper)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources.
#
# 3. Change the values in the "env" block to match your values.

name: Deploy to Cloud Run from Source

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
  REGION: ${{ secrets.GCP_REGION }}
  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - name: 'Check Secrets Population'
        run: |
          echo "Project ID length: ${#PROJECT_ID}"
          echo "Service Name length: ${#SERVICE_NAME}"
          echo "Region length: ${#REGION}"
          echo "WIP length: ${#WORKLOAD_IDENTITY_PROVIDER}"
          echo "Service Account length: ${#SERVICE_ACCOUNT}"
          
          # Check if any are empty
          [[ -z "$PROJECT_ID" ]] && echo "⚠️ PROJECT_ID is empty" || echo "✓ PROJECT_ID is set"
          [[ -z "$SERVICE_NAME" ]] && echo "⚠️ SERVICE_NAME is empty" || echo "✓ SERVICE_NAME is set"
          [[ -z "$REGION" ]] && echo "⚠️ REGION is empty" || echo "✓ REGION is set"
          [[ -z "$WORKLOAD_IDENTITY_PROVIDER" ]] && echo "⚠️ WIP is empty" || echo "✓ WIP is set"
          [[ -z "$SERVICE_ACCOUNT" ]] && echo "⚠️ SERVICE_ACCOUNT is empty" || echo "✓ SERVICE_ACCOUNT is set"

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT }}'
          token_format: 'access_token'
          create_credentials_file: true
          export_environment_variables: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          project_id: '${{ env.PROJECT_ID }}'
          service: '${{ env.SERVICE_NAME }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a different source folder, update the image name below:
          source: './'

      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |-
          echo ${{ steps.deploy.outputs.url }}
